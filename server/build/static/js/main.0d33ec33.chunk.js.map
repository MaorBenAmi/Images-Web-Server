{"version":3,"sources":["assets/images/heart.svg","components/atoms/ImageFooterDetails/ImageFooterDetails.js","components/atoms/Image/Image.js","components/pages/ImagesGallery/ImagesGallery.js","components/pages/ImagesGallery/ImagesGalleryContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","ImagesFooterDetails","likes","description","class","heartIcon","Image","url","useState","showImageDetails","toggleImageDetails","onMouseEnter","onMouseLeave","src","alt","ImageFooterDetails","ImagesGallery","images","isAllItemsLoaded","loader","className","pageStart","loadMore","hasMore","element","React","Fragment","map","image","ImagesGalleryContainer","imagesList","setImagesList","fetchImagesGallery","a","fetch","then","res","json","response","data","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,mC,8PCc5BC,EAXa,SAAC,GAGtB,IAFNC,EAEK,EAFLA,MAEK,EADLC,YAEA,OACC,yBAAKC,MAAM,IACV,yBAAKA,MAAM,QAAQC,IAAWH,KCgBlBI,EAtBD,SAAC,GAIR,IAHNJ,EAGK,EAHLA,MACAC,EAEK,EAFLA,YACAI,EACK,EADLA,IACK,EAC0CC,oBAAS,GADnD,mBACEC,EADF,KACoBC,EADpB,KAUL,OACC,yBAAKN,MAAM,wBAAwBO,aATf,WACpBD,GAAmB,IAQ4CE,aAL5C,WACnBF,GAAmB,KAKlB,yBAAKG,IAAKN,EAAKO,IAAI,KAClBL,GAAoB,kBAACM,EAAD,CAAoBb,MAAOA,EAAOC,YAAaA,M,gBCcxDa,EA3BO,SAAC,GAEhB,IADNC,EACK,EADLA,OACK,EAC0CT,oBAAS,GADnD,mBACEU,EADF,KAQCC,GARD,KAQU,yBAAKC,UAAU,UAAf,gBACf,OACC,kBAAC,IAAD,CACCC,UAAW,EACXC,SATgB,WACjB,OAAOL,GASNM,QAASL,EACTC,OAAQA,EACRK,QAASC,IAAMC,UAEdT,EAAOU,KAAI,SAAAC,GACX,OAAO,kBAAC,EAAUA,QCHPC,G,MApBgB,WAAO,IAAD,EACArB,mBAAS,IADT,mBAC7BsB,EAD6B,KACjBC,EADiB,KAG9BC,EAAkB,uCAAG,4BAAAC,EAAA,sEACHC,MAAM,eAC3BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAFQ,OACpBC,EADoB,OAG1BP,EAAcO,EAASC,MAHG,2CAAH,qDAUxB,OAJAC,qBAAU,WACTR,MACE,IAGF,yBAAKZ,UAAU,4BACd,kBAAC,EAAD,CAAeH,OAAQa,O,MCLXW,MATf,WACC,OACC,yBAAKrB,UAAU,OAEd,kBAAC,EAAD,QCGiBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d33ec33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heart.c8dfc20d.svg\";","import React from 'react';\nimport heartIcon from 'assets/images/heart.svg';\n\nconst ImagesFooterDetails = ({\n\tlikes,\n\tdescription\n}) => {\n\treturn (\n\t\t<div class=\"\">\n\t\t\t<div class=\"text\">{heartIcon}{likes}</div>\n\t\t</div>\n\t)\n}\n\nexport default ImagesFooterDetails;","import React, { useState } from 'react';\nimport ImageFooterDetails from '../ImageFooterDetails/ImageFooterDetails';\n\nconst Image = ({\n\tlikes,\n\tdescription,\n\turl\n}) => {\n\tconst [showImageDetails, toggleImageDetails] = useState(false);\n\tconst onHoverImage = () => {\n\t\ttoggleImageDetails(true);\n\t}\n\n\tconst onStopHover = () => {\n\t\ttoggleImageDetails(false);\n\t}\n\n\treturn (\n\t\t<div class=\"image-item responsive\" onMouseEnter={onHoverImage} onMouseLeave={onStopHover}>\n\t\t\t<img src={url} alt=\"\" />\n\t\t\t{showImageDetails && <ImageFooterDetails likes={likes} description={description} />}\n\t\t</div>\n\t)\n}\n\nexport default Image;","import React, { useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport Image from 'components/atoms/Image';\n\nimport InfiniteScroll from 'react-infinite-scroller';\n\nconst ImagesGallery = ({\n\timages\n}) => {\n\tconst [isAllItemsLoaded, toggleImagesLoaded] = useState(false);\n\n\tconst loadItems = () => {\n\t\treturn images;\n\t}\n\n\n\tconst loader = <div className=\"loader\">Loading ...</div>;\n\treturn (\n\t\t<InfiniteScroll\n\t\t\tpageStart={0}\n\t\t\tloadMore={loadItems}\n\t\t\thasMore={isAllItemsLoaded}\n\t\t\tloader={loader}\n\t\t\telement={React.Fragment}\n\t\t>\n\t\t\t{images.map(image => {\n\t\t\t\treturn <Image {...image} />\n\t\t\t})}\n\n\t\t</InfiniteScroll>\n\t)\n}\n\nexport default ImagesGallery;","import React, { useEffect, useState } from 'react';\nimport ImagesGallery from './ImagesGallery';\nimport './imagesGallery.css';\n\nconst ImagesGalleryContainer = () => {\n\tconst [imagesList, setImagesList] = useState([]);\n\n\tconst fetchImagesGallery = async () => {\n\t\tconst response = await fetch('/api/images')\n\t\t\t.then(res => res.json());\n\t\tsetImagesList(response.data);\n\t}\n\n\tuseEffect(() => {\n\t\tfetchImagesGallery();\n\t}, []);\n\t\n\treturn (\n\t\t<div className='images-gallery-container'>\n\t\t\t<ImagesGallery images={imagesList} />\n\t\t</div>\n\t)\n}\n\nexport default ImagesGalleryContainer;","import React from 'react';\n\nimport ImagesGallery from 'components/pages/ImagesGallery';\nimport 'assets/css/App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* <Header /> */}\n\t\t\t<ImagesGallery />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'assets/css/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'assets/css/utilities.css';\n\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}